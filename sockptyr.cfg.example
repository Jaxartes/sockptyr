# Example onfiguration for sockptyr_gui.tcl.
# You can copy this to sockptyr.cfg and edit it to your needs.

# Warning: This is actually a Tcl script and executed when you run
# sockptyr_gui.tcl.  So be careful with its contents, and who you let
# edit it.  And if you copy sockptyr_gui.tcl to a new directory, check
# that directory for a sockptyr.cfg file you didn't put there. (Or
# sockptyr.so or sockptyr.dylib, those are also read from the same
# directory and executed.)

# The configuration is in the form of Tcl code to build an array
# $config(...), as follows:

#       Identify each connection with a label $label
#           which is also used in display etc
#           the label actually used depends on the connection source
#           for "listen": $label:$counter
#           for "connect": $label
#           for "directory": $label:[basename $filename]
#       set config($label:source) ...
#           specifies the connection source, one of the following lists
#           To listen for connections on a UNIX domain stream socket:
#               2 elements: listen $filename
#           To connect to a UNIX domain stream socket:
#               2 elements: connect $filename
#           To monitor a directory for UNIX domain stream sockets, and
#           connect to them:
#               3-4 elements: directory $dirname $interval [$retries]
#               If "inotify" is available it uses that to monitor the
#               directory.  Otherwise it reads the directory every
#               $interval seconds.
#               If $retries is supplied it's a list of numbers, each a
#               time period in milliseconds to wait before retrying
#               a failed connection.
#               If $retries is not supplied, config(directory_retries)
#               is used instead.
#       set config($label:button:$num:...)
#           Configuration for buttons on the connection from this source.
#           The buttons are numbered 0, 1, etc.  See below for details
#           to be included.
#
#           There should be at least two buttons, one to use the connection
#           somehow and one to close it.  Perhaps more.
#       set config($label:button:$num:text) ...
#           Text to show on the button
#       set config($label:button:$num:always) ...
#           Flag indicating this button is always applicable even when the
#           connection has been disconnected.  1 is true, 0 or absence is
#           false.
#       set config($label:button:$num:action) ...
#           Tcl list defining action to perform for this button.
#           It's a partial Tcl command to which the following will be
#           appended:
#               config label
#               full label
#           Pre-coded commands:
#               conn_action_ptyrun $cmd $statlong $statshort $cfglbl $fulllbl
#                   Open a PTY and execute the specified program $cmd,
#                   a shell command with limited "%" substitution:
#                       %% - "%"
#                       %l - full label
#                       %p - PTY pathname
#                   Usually the command should end with "&".
#                   $statlong & $statshort are long & short status strings
#                   to show for the connection once this is done.
#               conn_action_loopback $cfglbl $fulllbl
#                   Hook the connection up to itself (loopback).
#                   Note: "Loopback" buttons are for testing; in many
#                   production scenarios they're useless or worse,
#                   so you may want to leave them out.
#               conn_action_close $cfglbl $fulllbl
#                   Close the connection and get rid of it.
#               conn_action_mark $cfglbl $fulllbl
#                   Mark the connection for use with conn_action_link.
#               conn_action_link $cfglbl $fulllbl
#                   Link the connection to the one previously selected
#                   using conn_action_mark.
#       set config(verbosity)
#           Making this 1 causes sockptyr to produce more output, for
#           debugging.  Leaving it out makes it more quiet.
#       set config(directory_retries)
#           List of numbers, giving milliseconds delay between retries
#           for connecting to sockets found via the "directory" source type,
#           see above.  May be overridden on a per-source basis.

set config(LISTY:source) {listen ./sockptyr_test_env_l}
set config(LISTY:button:0:text) Terminal
set config(LISTY:button:0:action) {conn_action_ptyrun {xterm -fn 8x16 -geometry 80x24 -fg cyan -bg black -cr cyan -sb -T "%l" -n "%l" -e picocom %p &} Terminal T}
set config(LISTY:button:1:text) Loopback
set config(LISTY:button:1:action) conn_action_loopback
set config(LISTY:button:2:text) Remove
set config(LISTY:button:2:action) conn_action_remove
set config(LISTY:button:2:always) 1
set config(CONN:source) {connect ./sockptyr_test_env_c}
set config(CONN:button:0:text) Terminal
set config(CONN:button:0:action) {conn_action_ptyrun {xterm -fn 8x16 -geometry 80x24 -fg cyan -bg black -cr cyan -sb -T "%l" -n "%l" -e picocom %p &} Terminal T}
set config(CONN:button:1:text) Loopback
set config(CONN:button:1:action) conn_action_loopback
set config(CONN:button:2:text) Remove
set config(CONN:button:2:action) conn_action_remove
set config(CONN:button:2:always) 1
set config(DIR:source) {directory ./sockptyr_test_env_d 20}
set config(DIR:button:0:text) Terminal
set config(DIR:button:0:action) {conn_action_ptyrun {xterm -fn 8x16 -geometry 80x24 -fg cyan -bg black -cr cyan -sb -T "%l" -n "%l" -e picocom %p &} Terminal T}
set config(DIR:button:1:text) Loopback
set config(DIR:button:1:action) conn_action_loopback
set config(DIR:button:2:text) Remove
set config(DIR:button:2:action) conn_action_remove
set config(DIR:button:2:always) 1
set config(verbosity) 1
set config(directory_retries) {250 500 1250}
